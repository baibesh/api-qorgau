generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum RegistrationInvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

model Region {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  users   User[]
  Company Company[]
  Project Project[]
}

model ProjectStatus {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  Project     Project[]
}

model ProjectType {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  Project     Project[]
}

model Role {
  id                      Int                      @id @default(autoincrement())
  name                    String                   @unique
  description             String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  createdBy               Int?
  creator                 User?                    @relation("RoleCreatedBy", fields: [createdBy], references: [id])
  userRoles               UserRole[]
  rolePermissions         RolePermission[]
  registrationInvitations RegistrationInvitation[]
}

model Permission {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]
}

model UserRole {
  id         Int      @id @default(autoincrement())
  userId     Int
  roleId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())
  assignedBy Int?
  assigner   User?    @relation("UserRoleAssignedBy", fields: [assignedBy], references: [id])

  @@unique([userId, roleId])
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  grantedAt    DateTime   @default(now())
  grantedBy    Int?
  granter      User?      @relation("RolePermissionGrantedBy", fields: [grantedBy], references: [id])

  @@unique([roleId, permissionId])
}

model User {
  id              Int                      @id @default(autoincrement())
  email           String                   @unique
  password_hash   String
  refreshToken    String?
  phone           String?
  full_name       String
  isAdmin         Boolean                  @default(false)
  isDeleted       Boolean                  @default(false)
  status          UserStatus               @default(ACTIVE)
  registered_at   DateTime                 @default(now())
  last_login      DateTime?
  created_by      Int?
  creator         User?                    @relation("UserCreatedBy", fields: [created_by], references: [id])
  created_users   User[]                   @relation("UserCreatedBy")
  region_id       Int?
  region          Region?                  @relation(fields: [region_id], references: [id])
  profile         UserProfile?
  sentInvitations RegistrationInvitation[] @relation("InvitedBy")
  updatedAt       DateTime                 @updatedAt

  userRoles              UserRole[]
  createdRoles           Role[]           @relation("RoleCreatedBy")
  assignedUserRoles      UserRole[]       @relation("UserRoleAssignedBy")
  grantedRolePermissions RolePermission[] @relation("RolePermissionGrantedBy")

  executedProjects Project[]        @relation("ProjectExecutor")
  createdProjects  Project[]        @relation("ProjectCreatedBy")
  projectLogs      ProjectLog[]
  projectComments  ProjectComment[]

  boardMemberships KanbanBoardMember[]

  filesCreated File[] @relation("UserFilesCreated")
}

model Company {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?
  inn         String?       @unique
  address     String?
  regionId    Int?
  region      Region?       @relation(fields: [regionId], references: [id])
  profiles    UserProfile[]
  Project     Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProfile {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId Int?
  company   Company? @relation(fields: [companyId], references: [id])
  position  String?
  avatar    String?
  address   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RegistrationInvitation {
  id         Int                          @id @default(autoincrement())
  email      String
  code       String                       @unique
  status     RegistrationInvitationStatus @default(PENDING)
  invited_by Int
  inviter    User                         @relation("InvitedBy", fields: [invited_by], references: [id])
  role_id    Int
  role       Role                         @relation(fields: [role_id], references: [id])
  created_at DateTime                     @default(now())
  expires_at DateTime
}

model KanbanBoard {
  id          Int                 @id @default(autoincrement())
  name        String
  description String?
  code        String              @unique
  columns     KanbanColumn[]
  projects    Project[]           @relation("BoardProjects")
  members     KanbanBoardMember[]
  createdAt   DateTime            @default(now())
}

model KanbanBoardMember {
  id        Int      @id @default(autoincrement())
  boardId   Int
  userId    Int
  createdAt DateTime @default(now())

  board KanbanBoard @relation(fields: [boardId], references: [id])
  user  User        @relation(fields: [userId], references: [id])

  @@unique([boardId, userId])
}

model KanbanColumn {
  id          Int         @id @default(autoincrement())
  boardId     Int
  board       KanbanBoard @relation(fields: [boardId], references: [id])
  name        String
  position    Int
  color       String?
  description String?
  projects    Project[]
  createdAt   DateTime    @default(now())
}

model Project {
  id   Int     @id @default(autoincrement())
  name String
  code String?

  projectTypeId Int
  projectType   ProjectType @relation(fields: [projectTypeId], references: [id])

  regionId Int
  region   Region @relation(fields: [regionId], references: [id])

  statusId Int
  status   ProjectStatus @relation(fields: [statusId], references: [id])

  contactName  String
  contactPhone String?
  contactEmail String?

  companyId Int?
  company   Company? @relation(fields: [companyId], references: [id])

  executorId Int
  executor   User @relation("ProjectExecutor", fields: [executorId], references: [id])

  createdBy Int
  creator   User @relation("ProjectCreatedBy", fields: [createdBy], references: [id])

  kanbanColumnId Int
  kanbanColumn   KanbanColumn @relation(fields: [kanbanColumnId], references: [id])

  attachedFiles    Json
  expectedDeadline DateTime?
  comments         String?

  logs         ProjectLog[]
  commentsList ProjectComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  KanbanBoard KanbanBoard[] @relation("BoardProjects")

  @@unique([name, createdAt])
}

model ProjectLog {
  id        Int      @id @default(autoincrement())
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  changedBy Int
  user      User     @relation(fields: [changedBy], references: [id])
  field     String
  oldValue  String?
  newValue  String?
  createdAt DateTime @default(now())
}

model ProjectComment {
  id        Int      @id @default(autoincrement())
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  message   String
  createdAt DateTime @default(now())
}

model File {
  id           Int      @id @default(autoincrement())
  originalName String
  mimeType     String
  size         Int
  path         String
  createdAt    DateTime @default(now())

  createdBy Int
  creator   User     @relation("UserFilesCreated", fields: [createdBy], references: [id])
}
