generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum RegistrationInvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum CompanyType {
  PROJECT
  CUSTOMER
  SUPPLIER
  OTHER
}

enum CompanyAddedVia {
  MANUAL
  IMPORT
  API
}

model Region {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  users   User[]
  Company Company[]
  Project Project[]
}

model ProjectStatus {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  Project     Project[]
}

model Role {
  id                      Int                      @id @default(autoincrement())
  name                    String                   @unique
  description             String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  createdBy               Int?
  creator                 User?                    @relation("RoleCreatedBy", fields: [createdBy], references: [id])
  userRoles               UserRole[]
  rolePermissions         RolePermission[]
  registrationInvitations RegistrationInvitation[]

  @@index([createdBy], map: "idx_role_created_by")
}

model Permission {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]
}

model UserRole {
  id         Int      @id @default(autoincrement())
  userId     Int
  roleId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())
  assignedBy Int?
  assigner   User?    @relation("UserRoleAssignedBy", fields: [assignedBy], references: [id])

  @@unique([userId, roleId])
  @@index([userId], map: "idx_user_role_user_id")
  @@index([roleId], map: "idx_user_role_role_id")
  @@index([assignedBy], map: "idx_user_role_assigned_by")
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  grantedAt    DateTime   @default(now())
  grantedBy    Int?
  granter      User?      @relation("RolePermissionGrantedBy", fields: [grantedBy], references: [id])

  @@unique([roleId, permissionId])
  @@index([roleId], map: "idx_role_permission_role_id")
  @@index([permissionId], map: "idx_role_permission_permission_id")
  @@index([grantedBy], map: "idx_role_permission_granted_by")
}

model User {
  id              Int                      @id @default(autoincrement())
  email           String                   @unique
  password_hash   String
  refreshToken    String?
  phone           String?
  full_name       String
  isAdmin         Boolean                  @default(false)
  isDeleted       Boolean                  @default(false)
  status          UserStatus               @default(ACTIVE)
  registered_at   DateTime                 @default(now())
  last_login      DateTime?
  created_by      Int?
  creator         User?                    @relation("UserCreatedBy", fields: [created_by], references: [id])
  created_users   User[]                   @relation("UserCreatedBy")
  region_id       Int?
  region          Region?                  @relation(fields: [region_id], references: [id])
  profile         UserProfile?
  sentInvitations RegistrationInvitation[] @relation("InvitedBy")
  updatedAt       DateTime                 @updatedAt

  userRoles              UserRole[]
  createdRoles           Role[]           @relation("RoleCreatedBy")
  assignedUserRoles      UserRole[]       @relation("UserRoleAssignedBy")
  grantedRolePermissions RolePermission[] @relation("RolePermissionGrantedBy")

  executedProjects Project[]        @relation("ProjectExecutors")
  createdProjects  Project[]        @relation("ProjectCreatedBy")
  projectLogs      ProjectLog[]
  projectComments  ProjectComment[]

  boardMemberships KanbanBoardMember[]

  filesCreated File[] @relation("UserFilesCreated")

  createdCompanies  Company[]    @relation("CompanyCreatedBy")
  approvedCompanies Company[]    @relation("CompanyApprovedBy")
  companyLogs       CompanyLog[]

  @@index([region_id], map: "idx_user_region_id")
  @@index([status], map: "idx_user_status")
  @@index([isDeleted], map: "idx_user_is_deleted")
  @@index([created_by], map: "idx_user_created_by")
  @@index([last_login], map: "idx_user_last_login")
  @@index([status, isDeleted], map: "idx_user_status_deleted")
  @@index([region_id, status], map: "idx_user_region_status")
}

model Company {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?
  inn         String?       @unique
  address     String?
  regionId    Int?
  region      Region?       @relation(fields: [regionId], references: [id])
  profiles    UserProfile[]
  Project     Project[]

  type            CompanyType     @default(PROJECT)
  createdById     Int?
  createdBy       User?           @relation("CompanyCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  addedVia        CompanyAddedVia @default(MANUAL)
  originProjectId Int?
  originProject   Project?        @relation("CompanyOriginProject", fields: [originProjectId], references: [id], onDelete: SetNull)
  approvedById    Int?
  approvedBy      User?           @relation("CompanyApprovedBy", fields: [approvedById], references: [id], onDelete: SetNull)
  approvedAt      DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  registrationInvitations RegistrationInvitation[]
  logs                    CompanyLog[]

  @@index([regionId], map: "idx_company_region_id")
  @@index([type], map: "idx_company_type")
  @@index([createdById], map: "idx_company_created_by_id")
  @@index([approvedById], map: "idx_company_approved_by_id")
  @@index([originProjectId], map: "idx_company_origin_project_id")
  @@index([createdAt], map: "idx_company_created_at")
}

model UserProfile {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId Int?
  company   Company? @relation(fields: [companyId], references: [id])
  position  String?
  avatar    String?
  address   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId], map: "idx_user_profile_company_id")
}

model RegistrationInvitation {
  id         Int                          @id @default(autoincrement())
  email      String
  code       String                       @unique
  status     RegistrationInvitationStatus @default(PENDING)
  invited_by Int
  inviter    User                         @relation("InvitedBy", fields: [invited_by], references: [id])
  role_id    Int
  role       Role                         @relation(fields: [role_id], references: [id])
  companyId  Int?
  company    Company?                     @relation(fields: [companyId], references: [id], onDelete: SetNull)
  created_at DateTime                     @default(now())
  expires_at DateTime

  @@index([email], map: "idx_reginv_email")
  @@index([status], map: "idx_reginv_status")
  @@index([expires_at], map: "idx_reginv_expires_at")
  @@index([invited_by], map: "idx_reginv_invited_by")
  @@index([role_id], map: "idx_reginv_role_id")
  @@index([companyId], map: "idx_reginv_company_id")
  @@index([status, expires_at], map: "idx_reginv_status_expires")
}

model KanbanBoard {
  id          Int                 @id @default(autoincrement())
  name        String
  description String?
  code        String              @unique
  columns     KanbanColumn[]
  projects    Project[]           @relation("BoardProjects")
  members     KanbanBoardMember[]
  createdAt   DateTime            @default(now())
}

model KanbanBoardMember {
  id        Int      @id @default(autoincrement())
  boardId   Int
  userId    Int
  createdAt DateTime @default(now())

  board KanbanBoard @relation(fields: [boardId], references: [id])
  user  User        @relation(fields: [userId], references: [id])

  @@unique([boardId, userId])
  @@index([boardId], map: "idx_kbm_board_id")
  @@index([userId], map: "idx_kbm_user_id")
}

model KanbanColumn {
  id          Int         @id @default(autoincrement())
  boardId     Int
  board       KanbanBoard @relation(fields: [boardId], references: [id])
  name        String
  position    Int
  color       String?
  description String?
  projects    Project[]
  createdAt   DateTime    @default(now())

  @@index([boardId], map: "idx_kanban_column_board_id")
  @@index([position], map: "idx_kanban_column_position")
}

model Project {
  id   Int     @id @default(autoincrement())
  name String
  code String?

  regionId Int
  region   Region @relation(fields: [regionId], references: [id])

  statusId Int?
  status   ProjectStatus? @relation(fields: [statusId], references: [id], onDelete: SetNull)

  contactName  String
  contactPhone String?
  contactEmail String?

  companyId Int?
  company   Company? @relation(fields: [companyId], references: [id])

  executors User[] @relation("ProjectExecutors")

  createdBy Int
  creator   User @relation("ProjectCreatedBy", fields: [createdBy], references: [id])

  kanbanColumnId Int
  kanbanColumn   KanbanColumn @relation(fields: [kanbanColumnId], references: [id])

  attachedFiles    Json
  expectedDeadline DateTime?
  comments         String?

  logs         ProjectLog[]
  commentsList ProjectComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  KanbanBoard         KanbanBoard[] @relation("BoardProjects")
  companiesFromOrigin Company[]     @relation("CompanyOriginProject")

  @@unique([name, createdAt])
  @@index([regionId], map: "idx_project_region_id")
  @@index([statusId], map: "idx_project_status_id")
  @@index([companyId], map: "idx_project_company_id")
  @@index([createdBy], map: "idx_project_created_by")
  @@index([kanbanColumnId], map: "idx_project_kanban_column_id")
  @@index([expectedDeadline], map: "idx_project_expected_deadline")
  @@index([createdAt], map: "idx_project_created_at")
  @@index([regionId, statusId], map: "idx_project_region_status")
  @@index([companyId, statusId], map: "idx_project_company_status")
  @@index([createdBy, createdAt], map: "idx_project_creator_created_at")
  @@index([statusId, expectedDeadline], map: "idx_project_status_deadline")
}

model ProjectLog {
  id        Int      @id @default(autoincrement())
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  changedBy Int
  user      User     @relation(fields: [changedBy], references: [id])
  field     String
  oldValue  String?
  newValue  String?
  createdAt DateTime @default(now())

  @@index([projectId], map: "idx_project_log_project_id")
  @@index([changedBy], map: "idx_project_log_changed_by")
  @@index([createdAt], map: "idx_project_log_created_at")
  @@index([projectId, createdAt], map: "idx_project_log_project_created_at")
}

model ProjectComment {
  id        Int      @id @default(autoincrement())
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  message   String
  createdAt DateTime @default(now())

  @@index([projectId], map: "idx_project_comment_project_id")
  @@index([authorId], map: "idx_project_comment_author_id")
  @@index([createdAt], map: "idx_project_comment_created_at")
  @@index([projectId, createdAt], map: "idx_project_comment_project_created_at")
}

model File {
  id           Int      @id @default(autoincrement())
  originalName String
  mimeType     String
  size         Int
  path         String
  createdAt    DateTime @default(now())

  createdBy Int
  creator   User @relation("UserFilesCreated", fields: [createdBy], references: [id])

  @@index([createdBy], map: "idx_file_created_by")
  @@index([createdAt], map: "idx_file_created_at")
  @@index([mimeType], map: "idx_file_mime_type")
  @@index([createdBy, createdAt], map: "idx_file_creator_created_at")
}

model CompanyLog {
  id        Int      @id @default(autoincrement())
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  changedBy Int?
  user      User?    @relation(fields: [changedBy], references: [id], onDelete: SetNull)
  field     String
  oldValue  String?
  newValue  String?
  createdAt DateTime @default(now())

  @@index([companyId], map: "idx_company_log_company_id")
  @@index([changedBy], map: "idx_company_log_changed_by")
  @@index([createdAt], map: "idx_company_log_created_at")
  @@index([companyId, createdAt], map: "idx_company_log_company_created_at")
}
